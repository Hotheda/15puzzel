{"version":3,"sources":["Components/Board.js","Components/Brick.js","Components/ShuffleButton.js","Components/Winner.js","Components/Game.js","Components/BoardSizePicker.js","App.js","index.js"],"names":["Board","props","className","numberOfBricks","bricks","length","boardContent","rowStartIndex","columns","rowsContent","columnIndex","brickNum","push","map","row","key","printBoard","Brick","shuffle","brick_number","brickToMove","onClick","event","onBrickClick","ShuffleButton","shuffleBricks","Winner","numberOfMoves","Game","rows","useState","setNumberOfMoves","gameOver","setGameOver","onShuffle","setOnShuffle","setBricks","moveLine","useEffect","i","number","direction","shuffledBricks","brickToReset","shuffleCount","brickToMoveShuffle","Math","floor","random","splice","pop","checkOrder","num","id","findIndex","element","idOfEmpty","checkIfNeighboursIsEmpty","moveBrick","checkIfLineIsEmpty","moveBricks","setBricksToMove","tempBrickArray","forEach","mv","parseInt","bricksMoved","thisID","lastId","lineOfBricks","bricktemp","bricksToShow","setTimeout","BoardSizePicker","onChange","e","setBoardSize","type","defaultValue","default","value","App","setRows","setColumns","target","Index","ReactDOM","render","document","getElementById"],"mappings":"iLAGe,SAASA,EAAMC,GA4B1B,OACI,yBAAKC,UAAU,SA3BC,WAKhB,IAJA,IAAMC,EAAiBF,EAAMG,OAAOC,OAEhCC,EAAe,GAEXC,EAAgB,EAAGA,EAAcJ,EAAiB,EAAGI,GAAiBN,EAAMO,QAAQ,CAExF,IADA,IAAIC,EAAc,GACVC,EAAc,EAAGA,EAAcT,EAAMO,QAASE,IAAc,CAChE,IAAIC,EAAWJ,EAAcG,EAC7BD,EAAYG,KAAKX,EAAMG,OAAOO,IAElCL,EAAaM,KAAKH,GAUtB,OARcH,EAAaO,KAAI,SAACC,GAC5B,OACI,yBAAKC,IAAKD,EAAI,GAAGC,IAAKb,UAAU,aAC3BY,MAYRE,IC/BE,SAASC,EAAMhB,GAC1B,IAAIC,EAAY,WAehB,OAbGD,EAAMiB,QAEDhB,EADsB,IAAvBD,EAAMkB,aACO,sBAGA,WAEW,UAAtBlB,EAAMmB,aAAgD,IAArBnB,EAAMkB,aAC5CjB,EAAY,SAAWD,EAAMmB,YACxBnB,EAAMkB,aAAa,IACxBjB,EAAY,SAIZ,yBAAKmB,QAAS,SAACC,GAAD,OAASrB,EAAMsB,aAAatB,EAAMkB,eAAejB,UAAaA,GACxE,2BAAID,EAAMkB,eClBP,SAASK,EAAcvB,GAClC,OACI,yBAAKC,UAAW,WACZ,4BAAQA,UAAW,cAAemB,QAAS,kBAAIpB,EAAMwB,kBAArD,oBCHG,SAASC,EAAOzB,GAC3B,OACI,yBAAKC,UAAW,eACZ,yDACA,sCAAYD,EAAM0B,cAAlB,qBCKG,SAASC,EAAK3B,GAAO,IACzBO,EAAiBP,EAAjBO,QAASqB,EAAQ5B,EAAR4B,KADe,EAEWC,mBAAS,GAFpB,mBAExBH,EAFwB,KAETI,EAFS,OAGCD,oBAAS,GAHV,mBAGxBE,EAHwB,KAGdC,EAHc,OAIGH,oBAAS,GAJZ,mBAIxBI,EAJwB,KAIbC,EAJa,OAKHL,mBAAS,IALN,mBAKxB1B,EALwB,KAKhBgC,EALgB,OAMCN,oBAAS,GANV,mBAMxBO,EANwB,UAQ/BC,qBAAU,WAEN,IADA,IAAIlC,EAAS,GACLmC,EAAE,EAAEA,EAAG/B,EAAQqB,EAAMU,IAChB,IAANA,EACCnC,EAAOQ,KAAK,CAAC4B,OAAQD,EAAGE,UAAW,UAEnCrC,EAAOQ,KAAK,CAAC4B,OAAQD,EAAGE,UAAW,aAG3C,IAAMC,EAAiBxB,EAAQd,GAC/BgC,EAAUM,KACX,CAAClC,EAAQqB,IAEZ,IAAMX,EAAU,SAACd,GAEb,IADA,IAAIqB,EAAa,YAAOrB,GAChBuC,EAAa,EAAGA,EAAanC,EAAQqB,EAAMc,IAC/ClB,EAAckB,GAAcF,UAAU,QAE1C,GACI,IAAI,IAAIG,EAAa,EAAEA,EAAa,GAAGA,IAAe,CAClD,IAAIC,EAAmBC,KAAKC,MAAMD,KAAKE,SAASvB,EAAcpB,OAAO,GACrEoB,EAAcwB,OAAOJ,EAAmB,EAAEpB,EAAcA,EAAcpB,OAAO,IAC7EoB,EAAcyB,aAEfC,EAAW1B,IAGlB,OAFAQ,GAAY,GACZF,EAAiB,GACVN,GAGLF,EAAgB,SAAC6B,GACnB,IAAMC,EAAKjD,EAAOkD,WAAU,SAAAC,GAAO,OAAEA,EAAQf,SAASY,KAChDI,EAAYpD,EAAOkD,WAAU,SAAAC,GAAO,OAAmB,IAAjBA,EAAQf,UAEhDC,EAAYgB,EAAyBJ,EAAGG,GACzCf,EACCiB,EAAUL,EAAGG,EAAUf,GAGnBJ,IACJI,EAAYkB,EAAmBN,EAAIG,KAE/BI,EAAWP,EAAGG,EAAUf,IAK9BoB,EAAmB,SAACD,GAEtB,IADA,IAAIE,EAAc,YAAO1D,GACjBmC,EAAE,EAAGA,EAAE/B,EAAQqB,EAAMU,IACzBuB,EAAevB,GAAGE,UAAU,QAEhCmB,EAAWG,SAAQ,SAAAC,GACfF,EAAeE,EAAGX,IAAIZ,UAAYuB,EAAGvB,aAEzCL,EAAU0B,IAGRH,EAAqB,SAACN,EAAIG,GAC5B,GAAGH,EAAGG,EAAU,CACZ,GAAGH,GAAMY,SAAST,EAAUhD,GAAWqB,EACnC,MA1EG,aA2ED,GAAGwB,EAAG7C,IAAYgD,EAAUhD,EAC9B,MA1EE,iBA4EJ,GAAG6C,EAAGG,EAAU,CAClB,GAAGH,GAAMY,SAAST,EAAUhD,GAAYqB,EAASA,EAC7C,MA/EE,YAgFA,GAAGwB,EAAG7C,IAAYgD,EAAUhD,EAC9B,MA/EA,YAoFNiD,EAA4B,SAACJ,EAAIG,GACnC,OAAKH,EAAG,IAAOG,GAAaH,EAAG7C,EAvFrB,YAyFC6C,EAAG,IAAOG,IAAcH,EAAG,GAAG7C,EA1F9B,aA4FA6C,EAAG7C,IAAagD,EAzFnB,UA2FGH,EAAG7C,IAAagD,GA5FjB,aAmGRE,EAAa,SAACL,EAAGG,EAAUf,GAC7B,IAAIyB,EAAW,YAAO9D,GACtB8D,EAAYV,GAAWhB,OAAS0B,EAAYb,GAAIb,OAChD0B,EAAYb,GAAIb,OAAS,EACzBJ,EAAU8B,GACVf,EAAWe,GACXL,EAAgB,CAAC,CAACR,GAAIG,EAAWf,UAAWA,KAC5CV,EAAiBJ,EAAc,IAG7BiC,EAAc,SAACP,EAAGG,EAAUf,GAM9B,IALA,IAAIyB,EAAW,YAAO9D,GAClB+D,EAASX,EACTY,EAASZ,EACTa,EAAe,GAlHT,cAoHD5B,GAA4BY,EAAG,EAAIc,GArHjC,eAsHL1B,GAA6BY,EAAG,EAAIc,GAnHlC,YAoHF1B,GAA0BY,EAAGxB,EAAOsC,GArHhC,cAsHJ1B,GAA4BY,EAAGxB,EAAOsC,GAAW,CAE/C,OADAA,EAASC,EACF3B,GACH,IA1HF,YA2HM2B,EAASD,EAAS,EAClB,MACJ,IA9HD,aA+HKC,EAASD,EAAS,EAClB,MACJ,IA9HJ,UA+HQC,EAASD,EAAStC,EAClB,MACJ,IAlIF,YAmIMuC,EAASD,EAAStC,EAG1BwC,EAAazD,KAAK,CAACyC,GAAIe,EAAQ3B,UAAWA,IAE1C,IAAI6B,EAAYJ,EAAYE,GAC5BF,EAAYE,GAAUF,EAAYC,GAClCD,EAAYC,GAAUG,EAE9BT,EAAgBQ,GAChBjC,EAAU8B,GACVf,EAAWe,GACXnC,EAAiBJ,EAAc,IAI7BwB,EAAc,SAACe,GACjB,IAAI,IAAI3B,EAAE,EAAEA,EAAE2B,EAAY7D,OAAO,EAAEkC,IAC/B,GAAG2B,EAAY3B,GAAGC,SAAWD,EAAE,EAC3B,OAAO,EAIf,OADAN,GAAY,IACL,GAGLsC,EAAenE,EAAOS,KAAI,SAACuC,GAAO,OAC5B,kBAACnC,EAAD,CAAOF,IAAKqC,EAAIZ,OAAQrB,aAAciC,EAAIZ,OAAQtB,QAASgB,EAAWd,YAAagC,EAAIX,UAAWlB,aAAcA,OAc5H,OANGW,GACCsC,YAAW,WACPrC,GAAc,KAChB,KAIF,6BACI,kBAACnC,EAAD,CAAOI,OAAQmE,EAAc1C,KAAMA,EAAMrB,QAASA,IACjDwB,EAAW,kBAACN,EAAD,CAAQC,cAAeA,IAAmB,KACtD,kBAACH,EAAD,CAAeC,cAfA,WACnBU,GAAa,GACbC,EAAUlB,EAAQd,QCzKX,SAASqE,EAAgBxE,GACpC,OACI,yBAAKC,UAAW,kBACZ,+CACA,4BAAQA,UAAW,aAAcwE,SAAU,SAACC,GAAD,OAAK1E,EAAM2E,aAAaD,IAAIE,KAAM,SAAUxB,GAAIpD,EAAMoD,GAAIyB,aAAc7E,EAAM8E,SACrH,4BAAQC,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,WCGD,SAASC,IAAM,IAAD,EACFnD,mBAAS,GADP,mBAClBD,EADkB,KACbqD,EADa,OAEIpD,mBAAS,GAFb,mBAElBtB,EAFkB,KAEV2E,EAFU,KASzB,OACI,yBAAKjF,UAAY,YACb,kBAAC0B,EAAD,CAAMC,KAAMA,EAAMrB,QAASA,IAC3B,kBAACiE,EAAD,CAAiBpB,GAAI,iBAAkB0B,QAASlD,EAAM+C,aARxC,SAACD,GACnBO,EAAQjB,SAASU,EAAES,OAAOJ,QAC1BG,EAAWlB,SAASU,EAAES,OAAOJ,Y,MCdrC,SAASK,IACP,OACE,kBAACJ,EAAD,MAIJK,IAASC,OAAO,kBAACF,EAAD,MAAUG,SAASC,eAAe,U","file":"static/js/main.c47d60e5.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n\r\nexport default function Board(props){\r\n\r\n    const printBoard = (()=>{\r\n        const numberOfBricks = props.bricks.length\r\n\r\n        var boardContent = []\r\n\r\n        for(var rowStartIndex = 0; rowStartIndex<numberOfBricks - 1; rowStartIndex += props.columns){\r\n            var rowsContent = [];\r\n            for(var columnIndex = 0; columnIndex < props.columns; columnIndex++){\r\n                var brickNum = rowStartIndex+columnIndex\r\n                rowsContent.push(props.bricks[brickNum])\r\n            }\r\n            boardContent.push(rowsContent)\r\n        }\r\n        const board = boardContent.map((row)=>{\r\n            return(\r\n                <div key={row[0].key} className=\"board_row\">\r\n                    {row}\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return(\r\n            board\r\n        )\r\n    })\r\n\r\n    return(\r\n        <div className=\"board\">\r\n            {printBoard()}\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\n\r\nexport default function Brick(props){\r\n    var className = \"no_brick\"\r\n\r\n    if(props.shuffle){\r\n        if(props.brick_number !== 0){\r\n            className = \"brick shuffle_brick\"\r\n        }\r\n        else{\r\n            className = \"no_brick\"\r\n        }\r\n    }else if(props.brickToMove !== \"brick\" && props.brick_number!==0){\r\n        className = \"brick \" + props.brickToMove\r\n    }else if(props.brick_number>0){\r\n        className = \"brick\"\r\n    }\r\n\r\n    return(\r\n        <div onClick={(event)=>props.onBrickClick(props.brick_number)} className = {className}>\r\n            <p>{props.brick_number}</p>\r\n        </div>\r\n    )    \r\n}","import React from \"react\"\r\n\r\nexport default function ShuffleButton(props){\r\n    return(\r\n        <div className={\"shuffle\"}>\r\n            <button className={\"shuffle_btn\"} onClick={()=>props.shuffleBricks()}>Shuffle me here</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\n\r\nexport default function Winner(props){\r\n    return(\r\n        <div className={\"winner_text\"}>\r\n            <h1>You win, congratulations!</h1>\r\n            <p>It took {props.numberOfMoves} moves to finish</p>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport Board from \"./Board\";\r\nimport Brick from \"./Brick\";\r\nimport ShuffleButton from \"./ShuffleButton\"\r\nimport Winner from \"./Winner\"\r\n\r\nconst _moveRight = \"move_right\";\r\nconst _moveLeft = \"move_left\";\r\nconst _moveDown = \"move_down\";\r\nconst _moveUp = \"move_up\";\r\n\r\nexport default function Game(props){\r\n    const {columns, rows} = props;\r\n    const [numberOfMoves, setNumberOfMoves] = useState(0)\r\n    const [gameOver, setGameOver] = useState(false)\r\n    const [onShuffle, setOnShuffle] = useState(false)\r\n    const [bricks, setBricks] = useState([]);\r\n    const [moveLine, setMoveLine] = useState(true)\r\n\r\n    useEffect(() =>{\r\n        var bricks = []\r\n        for(var i=0;i<(columns*rows);i++){\r\n            if(i !== 0){\r\n                bricks.push({number: i, direction: \"brick\"});\r\n            }else{\r\n                bricks.push({number: i, direction: \"no_brick\"});\r\n            }\r\n        }\r\n        const shuffledBricks = shuffle(bricks)\r\n        setBricks(shuffledBricks)\r\n    }, [columns,rows])\r\n\r\n    const shuffle = (bricks)=>{\r\n        var shuffleBricks = [...bricks]\r\n        for(var brickToReset=0; brickToReset<columns*rows; brickToReset++){\r\n            shuffleBricks[brickToReset].direction=\"brick\"\r\n        }\r\n        do{\r\n            for(var shuffleCount=0;shuffleCount<30;shuffleCount++){\r\n                var brickToMoveShuffle=Math.floor(Math.random()*shuffleBricks.length-1)\r\n                shuffleBricks.splice(brickToMoveShuffle,0,shuffleBricks[shuffleBricks.length-1])\r\n                shuffleBricks.pop()\r\n            }\r\n        }while(checkOrder(shuffleBricks))\r\n        setGameOver(false)\r\n        setNumberOfMoves(0)\r\n        return shuffleBricks\r\n    }\r\n\r\n    const onBrickClick = ((num)=>{\r\n        const id = bricks.findIndex(element=>element.number===num)\r\n        const idOfEmpty = bricks.findIndex(element=>element.number===0)\r\n\r\n        var direction = checkIfNeighboursIsEmpty(id,idOfEmpty)\r\n        if(direction){\r\n            moveBrick(id,idOfEmpty,direction)\r\n        }\r\n        //Get more than one brick to move, move the whole line of bricks\r\n        else if(moveLine){\r\n            direction = checkIfLineIsEmpty(id, idOfEmpty)\r\n            if(direction){\r\n                moveBricks(id,idOfEmpty,direction)\r\n            }\r\n        }\r\n    })\r\n\r\n    const setBricksToMove = ((moveBricks)=>{\r\n        var tempBrickArray = [...bricks]\r\n        for(var i=0; i<columns*rows; i++){\r\n            tempBrickArray[i].direction=\"brick\"\r\n        }\r\n        moveBricks.forEach(mv => {\r\n            tempBrickArray[mv.id].direction = mv.direction;\r\n        });\r\n        setBricks(tempBrickArray);\r\n    })\r\n\r\n    const checkIfLineIsEmpty = (id, idOfEmpty) => {\r\n        if(id<idOfEmpty){\r\n            if(id >= parseInt(idOfEmpty/columns) * rows){\r\n                return _moveRight;\r\n            }else if(id%columns === idOfEmpty%columns){\r\n                return _moveDown;\r\n            }\r\n        }else if(id>idOfEmpty){\r\n            if(id <= parseInt(idOfEmpty/columns) * (rows)  + rows ){\r\n                return _moveLeft;\r\n            }else if(id%columns === idOfEmpty%columns){\r\n                return _moveUp;\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkIfNeighboursIsEmpty = ((id, idOfEmpty)=>{        \r\n        if( (id-1) === idOfEmpty && id%columns) {\r\n            return _moveLeft;\r\n        }else if( (id+1) === idOfEmpty && (id+1)%columns){\r\n            return _moveRight;\r\n        }else if( (id-columns) === idOfEmpty){\r\n            return _moveUp;\r\n        }else if( (id+columns) === idOfEmpty){\r\n            return _moveDown;\r\n        }else{\r\n            return false;\r\n        }\r\n    })\r\n\r\n    const moveBrick = ((id,idOfEmpty,direction)=>{\r\n        var bricksMoved = [...bricks]\r\n        bricksMoved[idOfEmpty].number = bricksMoved[id].number\r\n        bricksMoved[id].number = 0\r\n        setBricks(bricksMoved)\r\n        checkOrder(bricksMoved)\r\n        setBricksToMove([{id: idOfEmpty, direction: direction}])\r\n        setNumberOfMoves(numberOfMoves+1)\r\n    })\r\n\r\n    const moveBricks = ((id,idOfEmpty,direction)=>{\r\n        var bricksMoved = [...bricks]\r\n        var thisID = idOfEmpty;\r\n        var lastId = idOfEmpty;\r\n        var lineOfBricks = [];\r\n\r\n        while( ( direction === _moveLeft && (id-1 > thisID )) ||\r\n            ( direction === _moveRight && (id+1 < thisID )) ||\r\n            ( direction === _moveUp && (id-rows > thisID )) ||\r\n            ( direction === _moveDown && (id+rows < thisID )) ){\r\n                thisID = lastId;\r\n                switch(direction){\r\n                    case _moveLeft:\r\n                        lastId = thisID + 1;\r\n                        break;\r\n                    case _moveRight:\r\n                        lastId = thisID - 1;\r\n                        break;\r\n                    case _moveUp:\r\n                        lastId = thisID + rows;\r\n                        break;\r\n                    case _moveDown:\r\n                        lastId = thisID - rows;\r\n                        break;\r\n                }\r\n                lineOfBricks.push({id: lastId, direction: direction})\r\n\r\n                var bricktemp = bricksMoved[lastId]\r\n                bricksMoved[lastId] = bricksMoved[thisID]\r\n                bricksMoved[thisID] = bricktemp\r\n        }\r\n        setBricksToMove(lineOfBricks)\r\n        setBricks(bricksMoved)\r\n        checkOrder(bricksMoved)\r\n        setNumberOfMoves(numberOfMoves+1)\r\n    })\r\n\r\n\r\n    const checkOrder = ((bricksMoved)=>{\r\n        for(var i=0;i<bricksMoved.length-1;i++){\r\n            if(bricksMoved[i].number !== i+1){\r\n                return false;\r\n            }\r\n        }\r\n        setGameOver(true)\r\n        return true;\r\n    })\r\n\r\n    const bricksToShow = bricks.map((num)=>{return(\r\n                <Brick key={num.number} brick_number={num.number} shuffle={onShuffle} brickToMove={num.direction} onBrickClick={onBrickClick}/>\r\n            )})\r\n\r\n    const shuffleBricks = (()=>{\r\n        setOnShuffle(true)\r\n        setBricks(shuffle(bricks))\r\n    })\r\n\r\n    if(onShuffle){\r\n        setTimeout(()=>{\r\n            setOnShuffle((false))\r\n        },500)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Board bricks={bricksToShow} rows={rows} columns={columns}/>\r\n            {gameOver ? <Winner numberOfMoves={numberOfMoves}/> : null}\r\n            <ShuffleButton shuffleBricks={shuffleBricks}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\n\r\nexport default function BoardSizePicker(props){\r\n    return(\r\n        <div className={\"size_input_div\"} >\r\n            <label>Board size: </label>\r\n            <select className={\"size_input\"} onChange={(e)=>props.setBoardSize(e)} type={\"number\"} id={props.id} defaultValue={props.default}>\r\n                <option value=\"3\">3 x 3</option>\r\n                <option value=\"4\">4 x 4</option>\r\n                <option value=\"5\">5 x 5</option>\r\n                <option value=\"6\">6 x 6</option>\r\n            </select>\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\"\r\nimport Game from \"./Components/Game\"\r\nimport BoardSizePicker from \"./Components/BoardSizePicker\"\r\n\r\n// Skapa spelbräde 4x4 skall kodas in i variabler\r\n// lägg till block ( 4x4-1 )\r\n// Numreras 1 och uppåt\r\n// blickor skall vara blandade vid start\r\n// flytta brickor genom att klicka på brickan bredvid tom ruta\r\n// lägg till knapp för att blanda block\r\n// När puzzlet är löst skall detta visas för användaren\r\n// kontrollera så inte puzzlet är löst direkt\r\n\r\nexport default function App(){\r\n    const [rows,setRows] = useState(4)\r\n    const [columns,setColumns] = useState(4)\r\n\r\n    const setBoardSize = ((e)=>{\r\n        setRows(parseInt(e.target.value))\r\n        setColumns(parseInt(e.target.value))\r\n    })\r\n\r\n    return(\r\n        <div className = \"main_div\">\r\n            <Game rows={rows} columns={columns} />\r\n            <BoardSizePicker id={\"rowsandcolumns\"} default={rows} setBoardSize={setBoardSize}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./Css/styles.css\"\n\nfunction Index(){\n  return(\n    <App/>\n  )\n}\n\nReactDOM.render(<Index/>, document.getElementById(\"root\"))"],"sourceRoot":""}