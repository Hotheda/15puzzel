{"version":3,"sources":["Components/Board.js","Components/Brick.js","Components/ShuffleButton.js","Components/Winner.js","Components/Game.js","Components/BoardSizePicker.js","App.js","index.js"],"names":["Board","props","className","numberOfBricks","bricks","length","boardContent","rowStartIndex","columns","rowsContent","columnIndex","brickNum","push","map","row","key","printBoard","Brick","shuffle","brick_number","brickToMove","id","direction","onClick","event","onBrickClick","ShuffleButton","shuffleBricks","Winner","numberOfMoves","Game","rows","useState","setNumberOfMoves","gameOver","setGameOver","onShuffle","setOnShuffle","setBricks","setBrickToMove","useEffect","i","shuffledBricks","brickToMoveShuffle","Math","floor","random","splice","pop","checkOrder","num","findIndex","element","idOfEmpty","checkIfNeighboursIsEmpty","moveBrick","bricksMoved","bricksToShow","setTimeout","BoardSizePicker","onChange","e","setBoardSize","type","defaultValue","default","value","App","setRows","setColumns","parseInt","target","Index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a98d4f73.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n\r\nexport default function Board(props){\r\n\r\n    const printBoard = (()=>{\r\n        const numberOfBricks = props.bricks.length\r\n\r\n        var boardContent = []\r\n\r\n        for(var rowStartIndex = 0; rowStartIndex<numberOfBricks - 1; rowStartIndex += props.columns){\r\n            var rowsContent = [];\r\n            for(var columnIndex = 0; columnIndex < props.columns; columnIndex++){\r\n                var brickNum = rowStartIndex+columnIndex\r\n                rowsContent.push(props.bricks[brickNum])\r\n            }\r\n            boardContent.push(rowsContent)\r\n        }\r\n        const board = boardContent.map((row)=>{\r\n            return(\r\n                <div key={row[0].key} className=\"board_row\">\r\n                    {row}\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return(\r\n            board\r\n        )\r\n    })\r\n\r\n    return(\r\n        <div className=\"board\">\r\n            {printBoard()}\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\n\r\nexport default function Brick(props){\r\n    var className = \"no_brick\"\r\n\r\n    if(props.shuffle && props.brick_number!==0){\r\n        className = \"brick shuffle_brick\"\r\n    }else if(props.brick_number===props.brickToMove.id){\r\n        className = \"brick \" + props.brickToMove.direction\r\n    }else if(props.brick_number>0){\r\n        className = \"brick\"\r\n    }\r\n\r\n    return(\r\n        <div onClick={(event)=>props.onBrickClick(props.brick_number)} className = {className}>\r\n            <p>{props.brick_number}</p>\r\n        </div>\r\n    )    \r\n}","import React from \"react\"\r\n\r\nexport default function ShuffleButton(props){\r\n    return(\r\n        <div className={\"shuffle\"}>\r\n            <button className={\"shuffle_btn\"} onClick={()=>props.shuffleBricks()}>Shuffle me here</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\n\r\nexport default function Winner(props){\r\n    return(\r\n        <div className={\"winner_text\"}>\r\n            <h1>You win, congratulations!</h1>\r\n            <p>It took {props.numberOfMoves} moves to finish</p>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport Board from \"./Board\";\r\nimport Brick from \"./Brick\";\r\nimport ShuffleButton from \"./ShuffleButton\"\r\nimport Winner from \"./Winner\"\r\n\r\nexport default function Game(props){\r\n    const {columns, rows} = props;\r\n    const [numberOfMoves, setNumberOfMoves] = useState(0)\r\n    const [gameOver, setGameOver] = useState(false)\r\n    const [onShuffle, setOnShuffle] = useState(false)\r\n    const [bricks, setBricks] = useState([]);\r\n    const [brickToMove, setBrickToMove] = useState({\r\n        id: -1,\r\n        direction: null\r\n    })\r\n\r\n\r\n    useEffect(() =>{\r\n        var bricks = []\r\n        for(var i=0;i<(columns*rows);i++){\r\n            bricks.push(i);\r\n        }\r\n        const shuffledBricks = shuffle(bricks)\r\n        setBricks(shuffledBricks)\r\n    }, [columns,rows])\r\n\r\n    const shuffle = (bricks)=>{\r\n        var shuffleBricks = [...bricks]\r\n        do{\r\n            for(var i=0;i<30;i++){\r\n                var brickToMoveShuffle=Math.floor(Math.random()*shuffleBricks.length-1)\r\n                shuffleBricks.splice(brickToMoveShuffle,0,shuffleBricks[shuffleBricks.length-1])\r\n                shuffleBricks.pop()\r\n            }\r\n        }while(checkOrder(shuffleBricks))\r\n        setGameOver(false)\r\n        setNumberOfMoves(0)\r\n        setBrickToMove({id: -1, direction: null})\r\n        return shuffleBricks\r\n    }\r\n\r\n    const onBrickClick = ((num)=>{\r\n        const id = bricks.findIndex(element=>element===num)\r\n        const idOfEmpty = bricks.findIndex(element=>element===0)\r\n\r\n        var direction = checkIfNeighboursIsEmpty(id,idOfEmpty)\r\n        if(direction){\r\n            moveBrick(id,idOfEmpty,direction)\r\n        }\r\n    })\r\n\r\n    const checkIfNeighboursIsEmpty = ((id, idOfEmpty)=>{        \r\n        if( (id-1) === idOfEmpty && id%columns) {\r\n            return \"move_left\";\r\n        }else if( (id+1) === idOfEmpty && (id+1)%columns){\r\n            return \"move_right\";\r\n        }else if( (id-columns) === idOfEmpty){\r\n            return \"move_up\";\r\n        }else if( (id+columns) === idOfEmpty){\r\n            return \"move_down\";\r\n        }else{\r\n            return false;\r\n        }\r\n    })\r\n\r\n    const moveBrick = ((id,idOfEmpty,direction)=>{\r\n        var bricksMoved = [...bricks]\r\n        bricksMoved[idOfEmpty] = bricksMoved[id]\r\n        bricksMoved[id] = 0\r\n        setBricks(bricksMoved)\r\n        checkOrder(bricksMoved)\r\n        setBrickToMove({id: bricksMoved[idOfEmpty], direction: direction})\r\n        setNumberOfMoves(numberOfMoves+1)\r\n    })\r\n\r\n    const checkOrder = ((bricksMoved)=>{\r\n        for(var i=0;i<bricksMoved.length-1;i++){\r\n            if(bricksMoved[i] !== i+1){\r\n                return false;\r\n            }\r\n        }\r\n        setGameOver(true)\r\n        return true;\r\n    })\r\n\r\n    const bricksToShow = bricks.map((num)=>{return(\r\n                <Brick key={num} brick_number={num} shuffle={onShuffle} brickToMove={brickToMove} onBrickClick={onBrickClick}/>\r\n            )})\r\n\r\n    const shuffleBricks = (()=>{\r\n        setOnShuffle(true)\r\n        setBricks(shuffle(bricks))\r\n    })\r\n\r\n    if(onShuffle){\r\n        setTimeout(()=>{\r\n            setOnShuffle((false))\r\n        },500)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Board bricks={bricksToShow} rows={rows} columns={columns}/>\r\n            {gameOver ? <Winner numberOfMoves={numberOfMoves}/> : null}\r\n            <ShuffleButton shuffleBricks={shuffleBricks}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\n\r\nexport default function BoardSizePicker(props){\r\n    return(\r\n        <div className={\"size_input_div\"} >\r\n            <label>Board size: </label>\r\n            <select className={\"size_input\"} onChange={(e)=>props.setBoardSize(e)} type={\"number\"} id={props.id} defaultValue={props.default}>\r\n                <option value=\"3\">3 x 3</option>\r\n                <option value=\"4\">4 x 4</option>\r\n                <option value=\"5\">5 x 5</option>\r\n                <option value=\"6\">6 x 6</option>\r\n            </select>\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\"\r\nimport Game from \"./Components/Game\"\r\nimport BoardSizePicker from \"./Components/BoardSizePicker\"\r\n\r\n// Skapa spelbräde 4x4 skall kodas in i variabler\r\n// lägg till block ( 4x4-1 )\r\n// Numreras 1 och uppåt\r\n// blickor skall vara blandade vid start\r\n// flytta brickor genom att klicka på brickan bredvid tom ruta\r\n// lägg till knapp för att blanda block\r\n// När puzzlet är löst skall detta visas för användaren\r\n// kontrollera så inte puzzlet är löst direkt\r\n\r\nexport default function App(){\r\n    const [rows,setRows] = useState(4)\r\n    const [columns,setColumns] = useState(4)\r\n\r\n    const setBoardSize = ((e)=>{\r\n        setRows(parseInt(e.target.value))\r\n        setColumns(parseInt(e.target.value))\r\n    })\r\n\r\n    return(\r\n        <div className = \"main_div\">\r\n            <Game rows={rows} columns={columns} />\r\n            <BoardSizePicker id={\"rowsandcolumns\"} default={rows} setBoardSize={setBoardSize}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./Css/styles.css\"\n\nfunction Index(){\n  return(\n    <App/>\n  )\n}\n\nReactDOM.render(<Index/>, document.getElementById(\"root\"))"],"sourceRoot":""}